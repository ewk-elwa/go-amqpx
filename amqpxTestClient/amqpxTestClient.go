package main

import (
	"bufio"
	"fmt"
	"net"
	"os"

	log "github.com/mgutz/logxi/v1"
)

func main() {

	protocolHeader100Open := []byte{
		0x41, 0x4d, 0x51, 0x50, 0x00, 0x01, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x52, 0x02, 0x00, 0x00, 0x00, 0x00, 0x53, 0x10, 0xd0, 0x00, 0x00, 0x00, 0x42,
		0x00, 0x00, 0x00, 0x0a, 0xa1, 0x24, 0x63, 0x62, 0x64, 0x35, 0x65, 0x36, 0x33, 0x63, 0x2d, 0x33,
		0x66, 0x34, 0x34, 0x2d, 0x34, 0x39, 0x32, 0x66, 0x2d, 0x38, 0x30, 0x37, 0x62, 0x2d, 0x65, 0x37,
		0x35, 0x33, 0x36, 0x64, 0x39, 0x64, 0x62, 0x35, 0x30, 0x65, 0xa1, 0x08, 0x74, 0x65, 0x73, 0x74,
		0x68, 0x6f, 0x73, 0x74, 0x40, 0x60, 0x7f, 0xff, 0x70, 0x00, 0x00, 0x75, 0x30, 0x40, 0x40, 0x40,
		0x40, 0x40}

	beginAttachAttachFlow := []byte{
		0x00, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00, 0x00, 0x00, 0x53, 0x11, 0xd0, 0x00, 0x00, 0x00, 0x11,
		0x00, 0x00, 0x00, 0x04, 0x40, 0x52, 0x00, 0x70, 0x7f, 0xff, 0xff, 0xff, 0x70, 0x7f, 0xff, 0xff,
		0xff,
		0x00, 0x00, 0x00, 0x76, 0x02, 0x00, 0x00, 0x00, 0x00, 0x53, 0x12, 0xd0, 0x00, 0x00, 0x00, 0x66,
		0x00, 0x00, 0x00, 0x0b, 0xa1, 0x24, 0x63, 0x39, 0x66, 0x32, 0x36, 0x39, 0x37, 0x38, 0x2d, 0x34,
		0x37, 0x34, 0x34, 0x2d, 0x34, 0x31, 0x35, 0x30, 0x2d, 0x39, 0x34, 0x31, 0x35, 0x2d, 0x37, 0x32,
		0x31, 0x38, 0x39, 0x31, 0x32, 0x62, 0x39, 0x66, 0x30, 0x37, 0x52, 0x00, 0x42, 0x50, 0x02, 0x50,
		0x00, 0x00, 0x53, 0x28, 0xd0, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x0b, 0x40, 0x52, 0x00,
		0x40, 0x52, 0x00, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x53, 0x29, 0xd0, 0x00, 0x00,
		0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0xa1, 0x00, 0x52, 0x00, 0x40, 0x52, 0x00, 0x42, 0x40, 0x40,
		0x40, 0x40, 0x52, 0x00, 0x53, 0x00,
		0x00, 0x00, 0x00, 0x76, 0x02, 0x00, 0x00, 0x00, 0x00, 0x53, 0x12, 0xd0, 0x00, 0x00, 0x00, 0x66,
		0x00, 0x00, 0x00, 0x0b, 0xa1, 0x24, 0x38, 0x38, 0x32, 0x39, 0x61, 0x36, 0x32, 0x32, 0x2d, 0x65,
		0x36, 0x64, 0x36, 0x2d, 0x34, 0x35, 0x36, 0x32, 0x2d, 0x61, 0x61, 0x36, 0x66, 0x2d, 0x33, 0x36,
		0x30, 0x36, 0x63, 0x31, 0x37, 0x34, 0x66, 0x32, 0x37, 0x66, 0x52, 0x01, 0x41, 0x50, 0x02, 0x50,
		0x00, 0x00, 0x53, 0x28, 0xd0, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x0b, 0xa1, 0x00, 0x52,
		0x00, 0x40, 0x52, 0x00, 0x42, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x00, 0x53, 0x29, 0xd0, 0x00,
		0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x07, 0x40, 0x52, 0x00, 0x40, 0x52, 0x00, 0x42, 0x40, 0x40,
		0x40, 0x40, 0x52, 0x00, 0x53, 0x00,
		0x00, 0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0x00, 0x00, 0x53, 0x13, 0xd0, 0x00, 0x00, 0x00, 0x19,
		0x00, 0x00, 0x00, 0x09, 0x40, 0x70, 0x7f, 0xff, 0xff, 0xff, 0x52, 0x00, 0x70, 0x7f, 0xff, 0xff,
		0xff, 0x52, 0x01, 0x52, 0x00, 0x52, 0xc8, 0x40, 0x42}

	transfer := []byte{
		0x00, 0x00, 0x04, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x53, 0x14, 0xd0, 0x00, 0x00, 0x00, 0x18,
		0x00, 0x00, 0x00, 0x08, 0x52, 0x00, 0x52, 0x00, 0xa0, 0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x52, 0x00, 0x42, 0x42, 0x40, 0x40, 0x00, 0x53, 0x70, 0xd0, 0x00, 0x00, 0x00, 0x0b,
		0x00, 0x00, 0x00, 0x05, 0x42, 0x50, 0x04, 0x40, 0x42, 0x52, 0x00, 0x00, 0x53, 0x73, 0xd0, 0x00,
		0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x0d, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x40, 0x83,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x40, 0x52, 0x00, 0x40, 0x00, 0x53, 0x77, 0xb0, 0x00, 0x00, 0x03, 0xf7, 0x53, 0x01, 0x01,
		0x03, 0xf2, 0x08, 0x01, 0x10, 0x00, 0x1a, 0x3c, 0x0a, 0x24, 0x0a, 0x04, 0x0a, 0x00, 0x1a, 0x00,
		0x12, 0x0f, 0x0a, 0x01, 0x6c, 0x12, 0x03, 0x4b, 0x43, 0x53, 0x1a, 0x05, 0x4b, 0x43, 0x53, 0x2b,
		0x31, 0x1a, 0x00, 0x22, 0x09, 0x52, 0x62, 0x78, 0x2d, 0x57, 0x69, 0x2d, 0x46, 0x69, 0x12, 0x04,
		0x08, 0x00, 0x12, 0x00, 0x18, 0x18, 0x20, 0xc8, 0x01, 0x29, 0xab, 0x00, 0xa3, 0xce, 0x61, 0x01,
		0x00, 0x00, 0x30, 0x00, 0x42, 0xaa, 0x06, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x42, 0x45, 0x47, 0x49,
		0x4e, 0x20, 0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d,
		0x2d, 0x2d, 0x0a, 0x4d, 0x49, 0x49, 0x43, 0x4b, 0x44, 0x43, 0x43, 0x41, 0x5a, 0x47, 0x67, 0x41,
		0x77, 0x49, 0x42, 0x41, 0x67, 0x49, 0x42, 0x41, 0x6a, 0x41, 0x4e, 0x42, 0x67, 0x6b, 0x71, 0x68,
		0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41, 0x44, 0x41, 0x78, 0x4d,
		0x51, 0x73, 0x77, 0x43, 0x51, 0x59, 0x44, 0x56, 0x51, 0x51, 0x47, 0x45, 0x77, 0x4a, 0x56, 0x55,
		0x7a, 0x45, 0x55, 0x0a, 0x4d, 0x42, 0x49, 0x47, 0x41, 0x31, 0x55, 0x45, 0x43, 0x67, 0x77, 0x4c,
		0x62, 0x47, 0x39, 0x6a, 0x59, 0x57, 0x78, 0x6b, 0x62, 0x32, 0x31, 0x68, 0x61, 0x57, 0x34, 0x78,
		0x44, 0x44, 0x41, 0x4b, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x73, 0x4d, 0x41, 0x30, 0x74, 0x44,
		0x55, 0x7a, 0x41, 0x65, 0x46, 0x77, 0x30, 0x78, 0x4f, 0x44, 0x41, 0x79, 0x4d, 0x6a, 0x55, 0x79,
		0x4d, 0x44, 0x49, 0x79, 0x0a, 0x4e, 0x44, 0x46, 0x61, 0x46, 0x77, 0x30, 0x79, 0x4d, 0x44, 0x41,
		0x79, 0x4d, 0x6a, 0x55, 0x79, 0x4d, 0x44, 0x49, 0x79, 0x4e, 0x44, 0x46, 0x61, 0x4d, 0x44, 0x45,
		0x78, 0x43, 0x7a, 0x41, 0x4a, 0x42, 0x67, 0x4e, 0x56, 0x42, 0x41, 0x59, 0x54, 0x41, 0x6c, 0x56,
		0x54, 0x4d, 0x52, 0x51, 0x77, 0x45, 0x67, 0x59, 0x44, 0x56, 0x51, 0x51, 0x4b, 0x44, 0x41, 0x74,
		0x73, 0x62, 0x32, 0x4e, 0x68, 0x0a, 0x62, 0x47, 0x52, 0x76, 0x62, 0x57, 0x46, 0x70, 0x62, 0x6a,
		0x45, 0x4d, 0x4d, 0x41, 0x6f, 0x47, 0x41, 0x31, 0x55, 0x45, 0x43, 0x77, 0x77, 0x44, 0x53, 0x30,
		0x4e, 0x54, 0x4d, 0x49, 0x47, 0x66, 0x4d, 0x41, 0x30, 0x47, 0x43, 0x53, 0x71, 0x47, 0x53, 0x49,
		0x62, 0x33, 0x44, 0x51, 0x45, 0x42, 0x41, 0x51, 0x55, 0x41, 0x41, 0x34, 0x47, 0x4e, 0x41, 0x44,
		0x43, 0x42, 0x69, 0x51, 0x4b, 0x42, 0x0a, 0x67, 0x51, 0x43, 0x34, 0x4e, 0x43, 0x73, 0x2b, 0x57,
		0x38, 0x4c, 0x65, 0x75, 0x6f, 0x5a, 0x59, 0x32, 0x34, 0x63, 0x61, 0x48, 0x4b, 0x35, 0x48, 0x45,
		0x77, 0x4d, 0x4a, 0x41, 0x49, 0x2b, 0x54, 0x45, 0x73, 0x4a, 0x6e, 0x65, 0x4f, 0x53, 0x35, 0x65,
		0x6d, 0x42, 0x4e, 0x70, 0x62, 0x4b, 0x34, 0x77, 0x41, 0x6b, 0x46, 0x42, 0x4b, 0x55, 0x69, 0x72,
		0x70, 0x66, 0x77, 0x5a, 0x6b, 0x38, 0x30, 0x0a, 0x4c, 0x36, 0x66, 0x45, 0x43, 0x67, 0x49, 0x61,
		0x58, 0x56, 0x4d, 0x4a, 0x6a, 0x69, 0x54, 0x36, 0x6d, 0x6f, 0x62, 0x52, 0x6e, 0x36, 0x53, 0x41,
		0x48, 0x50, 0x6c, 0x4c, 0x6e, 0x42, 0x68, 0x49, 0x37, 0x59, 0x37, 0x72, 0x74, 0x56, 0x4d, 0x71,
		0x7a, 0x51, 0x34, 0x64, 0x57, 0x56, 0x55, 0x52, 0x2f, 0x4d, 0x46, 0x54, 0x70, 0x52, 0x2f, 0x4f,
		0x48, 0x47, 0x30, 0x2f, 0x70, 0x6d, 0x33, 0x6c, 0x0a, 0x46, 0x46, 0x50, 0x31, 0x42, 0x42, 0x4e,
		0x44, 0x56, 0x6d, 0x59, 0x59, 0x48, 0x67, 0x4a, 0x5a, 0x44, 0x6a, 0x65, 0x4d, 0x58, 0x31, 0x34,
		0x65, 0x45, 0x38, 0x77, 0x61, 0x36, 0x2f, 0x73, 0x74, 0x34, 0x47, 0x33, 0x39, 0x45, 0x59, 0x67,
		0x74, 0x6d, 0x55, 0x71, 0x64, 0x33, 0x77, 0x49, 0x44, 0x41, 0x51, 0x41, 0x42, 0x6f, 0x31, 0x41,
		0x77, 0x54, 0x6a, 0x41, 0x4f, 0x42, 0x67, 0x4e, 0x56, 0x0a, 0x48, 0x51, 0x38, 0x42, 0x41, 0x66,
		0x38, 0x45, 0x42, 0x41, 0x4d, 0x43, 0x42, 0x34, 0x41, 0x77, 0x48, 0x51, 0x59, 0x44, 0x56, 0x52,
		0x30, 0x4f, 0x42, 0x42, 0x59, 0x45, 0x46, 0x49, 0x64, 0x69, 0x79, 0x4c, 0x6a, 0x64, 0x57, 0x6e,
		0x38, 0x52, 0x77, 0x72, 0x6b, 0x5a, 0x73, 0x4e, 0x57, 0x44, 0x32, 0x72, 0x4b, 0x63, 0x66, 0x35,
		0x78, 0x63, 0x4d, 0x42, 0x30, 0x47, 0x41, 0x31, 0x55, 0x64, 0x0a, 0x45, 0x51, 0x51, 0x57, 0x4d,
		0x42, 0x53, 0x47, 0x45, 0x6d, 0x6c, 0x30, 0x59, 0x32, 0x30, 0x36, 0x4c, 0x79, 0x39, 0x73, 0x4c,
		0x6b, 0x74, 0x44, 0x55, 0x79, 0x35, 0x4c, 0x51, 0x31, 0x4d, 0x72, 0x4d, 0x54, 0x41, 0x4e, 0x42,
		0x67, 0x6b, 0x71, 0x68, 0x6b, 0x69, 0x47, 0x39, 0x77, 0x30, 0x42, 0x41, 0x51, 0x73, 0x46, 0x41,
		0x41, 0x4f, 0x42, 0x67, 0x51, 0x41, 0x64, 0x59, 0x68, 0x55, 0x4e, 0x0a, 0x48, 0x49, 0x30, 0x46,
		0x6b, 0x64, 0x6b, 0x57, 0x63, 0x75, 0x41, 0x77, 0x65, 0x36, 0x38, 0x52, 0x43, 0x6c, 0x56, 0x49,
		0x51, 0x38, 0x57, 0x77, 0x64, 0x61, 0x32, 0x68, 0x6f, 0x6e, 0x6a, 0x6b, 0x71, 0x4c, 0x74, 0x4e,
		0x61, 0x53, 0x37, 0x6d, 0x5a, 0x56, 0x7a, 0x6d, 0x4b, 0x54, 0x33, 0x75, 0x7a, 0x44, 0x59, 0x58,
		0x4b, 0x44, 0x49, 0x37, 0x50, 0x66, 0x71, 0x58, 0x6c, 0x44, 0x69, 0x53, 0x0a, 0x6a, 0x48, 0x66,
		0x4e, 0x66, 0x56, 0x50, 0x33, 0x39, 0x64, 0x78, 0x75, 0x42, 0x48, 0x6d, 0x42, 0x56, 0x32, 0x34,
		0x57, 0x49, 0x74, 0x76, 0x41, 0x63, 0x73, 0x4e, 0x36, 0x32, 0x47, 0x38, 0x57, 0x51, 0x6a, 0x4e,
		0x49, 0x72, 0x48, 0x6b, 0x2b, 0x4a, 0x56, 0x44, 0x2b, 0x56, 0x79, 0x30, 0x4d, 0x48, 0x64, 0x49,
		0x4f, 0x68, 0x4f, 0x4f, 0x50, 0x50, 0x72, 0x6f, 0x55, 0x64, 0x31, 0x2b, 0x6f, 0x0a, 0x72, 0x70,
		0x45, 0x5a, 0x6f, 0x6d, 0x47, 0x45, 0x35, 0x46, 0x6a, 0x71, 0x4e, 0x59, 0x35, 0x48, 0x39, 0x34,
		0x63, 0x34, 0x4e, 0x52, 0x41, 0x33, 0x54, 0x4b, 0x48, 0x44, 0x68, 0x4c, 0x75, 0x46, 0x56, 0x70,
		0x73, 0x55, 0x59, 0x51, 0x3d, 0x3d, 0x0a, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d, 0x45, 0x4e, 0x44, 0x20,
		0x43, 0x45, 0x52, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x45, 0x2d, 0x2d, 0x2d, 0x2d, 0x2d,
		0x0a, 0x4a, 0x80, 0x01, 0x82, 0x63, 0x60, 0xc8, 0x89, 0x0c, 0xa1, 0x6d, 0x1c, 0x0d, 0x9c, 0xdc,
		0x12, 0x0e, 0xbd, 0x21, 0x20, 0x22, 0x87, 0xb1, 0x16, 0x0b, 0x66, 0x82, 0x96, 0xc3, 0x43, 0x4c,
		0xf5, 0xb5, 0xa9, 0x61, 0x72, 0x0d, 0x60, 0xa4, 0x37, 0x92, 0x09, 0x77, 0xcc, 0x57, 0xac, 0xa6,
		0xfb, 0x41, 0x37, 0x21, 0xd9, 0xf3, 0x2d, 0xe0, 0xf0, 0x2c, 0xb4, 0xed, 0xa8, 0x18, 0x20, 0x1d,
		0x22, 0xc9, 0x6a, 0x3f, 0x22, 0x56, 0x1f, 0x9a, 0x55, 0x64, 0x32, 0xff, 0x78, 0x72, 0xf8, 0x46,
		0x2c, 0x14, 0xbb, 0x51, 0x23, 0x68, 0x3d, 0xd8, 0x1a, 0xd2, 0x65, 0x71, 0x7b, 0x1b, 0x06, 0x2e,
		0xe1, 0x13, 0xe7, 0xbb, 0x3e, 0x85, 0x30, 0x50, 0x2f, 0xef, 0x5f, 0x06, 0x58, 0x44, 0x06, 0xed,
		0x9e, 0xd9, 0x85, 0xed, 0x75, 0xd9, 0xf9, 0x13, 0x06, 0xb8, 0x63, 0xcd, 0xe3, 0x69, 0x32, 0xe2,
		0x3d, 0x63, 0x82, 0xb}

	for {
		// connect to this socket
		conn, _ := net.Dial("tcp", "127.0.0.1:10010")
		recvBuf := make([]byte, 2048)
		log.Debug("TX: protocolHeader 1-0-0 open")
		conn.Write(protocolHeader100Open)
		log.Debug("Waiting for response: protocolHeader 1-0-0 open")
		rxBytes, _ := conn.Read(recvBuf)
		fmt.Printf("received: %d bytes\n", rxBytes)

		log.Debug("TX: begin-attach-attach-flow")
		conn.Write(beginAttachAttachFlow)
		log.Debug("Waiting for response: begin-attach-attach-flow")
		rxBytes, _ = conn.Read(recvBuf)
		fmt.Printf("received: %d bytes\n", rxBytes)

		log.Debug("TX: transfer")
		conn.Write(transfer)
		log.Debug("Waiting for response")
		rxBytes, _ = conn.Read(recvBuf)
		fmt.Printf("received: %d bytes\n", rxBytes)

		// TODO(eking) TX Flow message

		// TODO(eking) TX Disposition message

		// TODO(eking) TX Close message

		conn.Close()

		reader := bufio.NewReader(os.Stdin)
		fmt.Print("Run again? y/n: ")
		text, _ := reader.ReadString('\n')
		if text == "n" || text == "N" {
			break
		}
	}
	log.Debug("Alright, amqpxTestClient is done.")

}
